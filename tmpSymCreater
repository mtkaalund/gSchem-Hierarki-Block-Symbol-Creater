#!/usr/bin/env python

def add_to( string ):
	return " " + str(string)
## This will hold our x,y coordinate system
class Coordinate(object):
	def __init__(self, _x=0, _y=0):
		self.x = _x
		self.y = _y

	def printout(self):
		print "X:",self.x,"Y:",self.y

	def set_xy(self,_x,_y):
		self.x = _x
		self.y = _y

	def get_xy(self):
		return str(self.x) + add_to(self.y)

	def __repr__(self):
		return repr(self.x, self.y)

class Fill(object):
	# When this object is create like:
	#  obj = Fill()
	# It will create an object that states, the it is a
	# Hollow filling
	def __init__(self, _ftype = 0, _fwidth = -1, _angle1 = -1, _pitch1 = -1, _angle2=-1,_pitch2=-1):
		self.ftype = _ftype
		self.fwidth = _fwidth
		self.angle1 = _angle1
		self.pitch1 = _pitch1
		self.angle2 = _angle2
		self.pitch2 = _pitch2
		self.__determine()
	
	def __determine(self):
		if self.ftype == 0 or self.ftype == 4:  
			#Filling Hollow or Filling Void
			self.fwidth = -1
			self.angle1 = -1
			self.pitch1 = -1
			self.angle2 = -1
			self.pitch2 = -1
		elif self.ftype == 1: 
			#Filling Fill
			self.fwidth = -1
			self.angle1 = -1
			self.pitch1 = -1
			self.angle2 = -1
			self.pitch2 = -1
		elif self.ftype == 3: 
			#Filling Mesh
			self.angle2 = -1
			self.pitch2 = -1

	def get_fill(self):
		sout = add_to(self.ftype) + add_to(self.fwidth)
		sout = sout + add_to(self.angle1) + add_to(self.pitch1)
		sout = sout + add_to(self.angle2) + add_to(self.pitch2)
		return sout

	def printout(self):
		print self.get_fill()
			
class SymbolBox(Coordinate):
	def __init__(self, _coordinates, _fill, _color = 3):
		self.coordinates = _coordinates
		self.fill = _fill
		self.color = _color


class SymbolDraw:
	_capstyle  = ["none","square","round"]
	_dashstyle = ["solid","dotted","dashed","center","phantom"]
	_filltype  = ["hollow","fill","mesh","hatch","void"]

	def add_version(self):
		_version = "20110115"
		return "v " + _version + " 2\n"
	

	def box(self, x, y, w, h, c, linewidth, capstyle, dashstyle, dashlength, dashspace, filltype, fillwidth, argle1, pitch1, angle2, pitch2):
		sout = "B" + add_to(x) + add_to(y) + add_to(w)
		sout = sout + add_to(h)+ add_to(c) + add_to(linewidth)
		sout = sout + add_to(capstyle)

		# if dashstyle is not used for SOLID and DOTTED
		if dashstyle == 0 or dashstyle == 1:
			dashlength = -1
			if dashstyle == 0:
				dashspace  = -1
		sout = sout + add_to(dashstyle) + add_to(dashlength)
		sout = sout + add_to(dashspace) + add_to(filltype)
		
		if filltype == 0:
			fillwidth = -1
			angle1 = -1
			angle2 = -1
			pitch1 = -1
			pitch2 = -1
		
		sout = sout + add_to(fillwidth) + add_to(angle1)
		sout = sout + add_to(pitch1) + add_to(angle2)
		sout = sout + add_to(pitch2) 

		return sout + '\n'

	def pin(self, x1, y1, x2, y2, color, pintype, whichend):
		sout = "P" + add_to(x1) + add_to(y1) + add_to(x2)
		sout = sout + add_to(y2) + add_to(color)
		sout = sout + add_to(pintype) + add_to(whichend)
		return sout + '\n'

	def text(self, x, y, color, size, visibility, shown_name_value, angle, alignment, num_lines, strings):
		sout = "T" + add_to(x) + add_to(y) + add_to(color)
		sout = sout + add_to(size) + add_to(visibility)
		sout = sout + add_to(shown_name_value) 
		
		if angle in [0,90,180,270]:
			sout = sout + add_to(angle)
		else:
			sout = sout + add_to(0)

		if alignment in range(0,8):
			sout = sout + add_to(alignment)
		else:
			sout = sout + add_to(0)

		if num_lines == 0:
			sout = sout + add_to(1) + '\n'
		else:
			sout = sout + add_to(num_lines) + '\n'

		for entry in strings:
			sout = sout + entry + '\n'

		return sout
	
#	def attribute(self):
		# this functon will create an attribute
		#P 988 500 1300 500 1
		#{
		#T 1000 570 5 8 1 1 0
		#pinseq=3
		#T 1000 550 5 8 1 1 0
		#pinnumber=3
		#}

if __name__ == "__main__":
	print "This is an test, of how to create a gschem symbol"
	obj = SymbolDraw()
	print obj.add_version(),
	print obj.box(33000,67300, 2000, 2000, 3, 60, 0, 2, 75, 50, 0, 1, 1, 1,1,1),
	print obj.pin(0,200,200,1,0,0,0)
	print obj.text(16900, 35800,3,10,1,0,0,0,5,["text string line 1", "text string line 2", "text string line 3", "text string line 4", "text string line 5"])
	print "done"

	coor = [ Coordinate(1,7), Coordinate(5,3), Coordinate(99,44) ]
	Fobj = Fill()
	Fobj.printout()

	for element in coor:
		element.printout()

	for element in sorted(coor, key=lambda Coordinate: Coordinate.y, reverse=True):
		element.printout()	

# Notes:
# Pins should all be 300 mils long.
# and 400 mils between vertically pins.

